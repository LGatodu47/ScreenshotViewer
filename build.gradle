import java.nio.file.Paths

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: project.minecraft_version
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=${project.modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            mods {
                screenshot_viewer {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    runtimeOnly fg.deobf("curse.maven:configured-457570:${project.configured_release_id}")
    implementation "ca.weblite:java-objc-bridge:1.0.0"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

java {
    libsDirName = Paths.get(libsDirName).resolve("${project.compatible_mc_version}").toString()
    archivesBaseName = project.modid
    version = version.concat("-${project.mod_loader}-mc${project.compatible_mc_version}")
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : "LGatodu47",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "LGatodu47",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${project.modid}.mixins.json"
        ])
    }

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

mixin {
    add sourceSets.main, "${project.modid}.refmap.json"
}

afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
